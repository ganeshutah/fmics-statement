
I agree with John.  You are using Mooreâ€™s Law as a proxy for saying that the need for energy efficiency is leading to lots of software and hardware experimentation that is impacting correctness.   Why not just be explicit and avoid confusion?


> On Jun 21, 2020, at 1:13 PM, John Regehr <regehr@cs.utah.edu> wrote:
>
> Hi Ganesh, I like it but if I were writing this I'd try to make it jump around less.
>
> For example I'd be tempted to nuke this bit:
>
> > The End of Moore's law challenges us to compile to unusual mixes of
> > hardware. System-level point tools such as Sanitizers and Race
> > Checkers are essential - but they must ride the very same programming
> > APIs and libraries, avoiding ossification.
>
--
V1

Formal methods are not getting the attention they deserve. 

As for pedagogy, one must not forget the core of FM - namely the
ability to find bugs in downsized models. Here, tools such as Alloy,
SPIN, Murphi, BDD/SAT tools, and SMT tools cannot stand apart,
emphasizing their differences; instead, they must come together into
polished plug-and-play tooling - a veritable Matlab for correctness
analysis. Pedagogical success is achieved when a ``Joe Programmer''
becomes a Youtube teacher (as in ML), touting why one cannot survive
complexity without Formal Methods.

As for productivity enhancement, the End of Moore's law challenges us
to compile to unusual mixes of hardware. Here, system level point
tools such as Sanitizers and Race Checkers must ride the very same
APIs and libraries being created to manage programming
complexity. Synthesis tools must target the same APIs and stay nimble
to cater to leading experts, avoiding ossification.

As for societal responsibility, our contributions to save the planet
and its denizens can come in the form of energy savings made possible
through reduced precision, and on-line checks catching bit-flips to
bad actors.

It is fine if the real pistons and crankshafts of system building are
guided by Empirical Software Engineering -- so long as Formal Methods
are the precision ball-bearings no one sees.

--
V2

Formal methods are not getting the attention they deserve; but what
are we wishing for?

One must not forget the core of FM: the ability to find bugs in
downsized models. Here, tools such as Alloy, SPIN, Murphi, BDD/SAT
tools, and SMT tools cannot stand apart, emphasizing their
differences; they must instead cohere into polished plug-and-play
tooling - a veritable Matlab for correctness analysis. Pedagogical
success is achieved when a ``Joe Programmer'' also becomes a Youtube
teacher (as in ML).

The End of Moore's law challenges us to compile to unusual mixes of
hardware. System level point tools such as Sanitizers and Race
Checkers are essential - but they must ride the very same programming
APIs and libraries, avoiding ossification.

Energy savings made possible through reduced precision, and on-line
checks that catch bit-flips to bad actors are good karma.

In conclusion, it is fine for FM to be the precision ball-bearings that nobody sees,
letting Empirical Software Engineering be the big honking crankshafts.

--
V3

Formal methods are not getting the attention they deserve; but what
are we wishing for?

One must not forget the core of Formal Methods: the ability to find
bugs in downsized models. Here, tools such as Alloy, SPIN, Murphi,
BDD/SAT tools, and SMT tools cannot stand apart, emphasizing their
differences; they must instead cohere into polished plug-and-play
tooling - a veritable Matlab for correctness analysis.

Increasingly, Formal Methods have important roles to play in ensuring
the correctness of heterogeneous hardware and software in the
multicore era. There is a growing need for point tools in support of
system construction, a few examples being Access Sanitizers, Race
Checkers, and Numerical Precision Tuning tools. Focus on creating such
tools can keep Formal Methods well aligned with real system design
needs.

Without enough well-polished and well-curated tools it is nearly
impossible to make the case for gradually introducing formal ideas
throughout the curriculum. That must continue to be a central
emphasis.

---
V4

Formal methods are not getting the attention they deserve; but what
are we wishing for? Are we surprised it is not taking off as it
should? Have we preached to the quire more than demonstrated it
to our colleagues? Curricular integration?

One must not forget the core of Formal Methods: the ability to find
bugs in downsized models. Here, tools such as Alloy, SPIN, Murphi,
BDD/SAT tools, and SMT tools cannot stand apart, emphasizing their
differences; they must instead cohere into polished plug-and-play
tooling - a veritable Matlab for correctness analysis.

Increasingly, Formal Methods have important roles to play in ensuring
the correctness of heterogeneous hardware and software in the
multicore era. There is a growing need for point tools in support of
system construction, a few examples being Access Sanitizers, Race
Checkers, and Numerical Precision Tuning tools. Focus on creating such
tools can keep Formal Methods well aligned with real system design
needs.

Without enough well-polished and well-curated tools it is nearly
impossible to make the case for gradually introducing formal ideas
throughout the curriculum. That must continue to be a central
emphasis.


no doubt succeeded
letting its success and math depth guarantee its future foolish - others take over
no need to fm every 10 lines of code - failure is in clarifying that. where is the most money lost? lives lost? what methods work the best? what can be left to expert levels and which are the best ways to bring experts into the area? what excites them the most? what can they begin applying today to solve a real-life problem they face? The success of ML has been that. In conclusion it is more about risk calibration. But to appreciate that, students must be first motivated to know where the risks are in advanced systems and coding. I don't think we are doing that.


---
V5

By many measures, Formal Methods have succeeded: how else would you
explain that no chip tapes out without FM? that it gets routinely
applied for things such as device drivers? or that C compilers
can now be mechanically derived?  Yet, formal methods cannot survive
and remain relevant in curricula solely by the power of their inner beauty.
We must aggressively engage now to keep FM relevant in classes we teach.
Here are two suggestions, one addressing systems classes and the other
addressing foundational beginner classes.


First, today's systems classes often do not differentiate between
getting a system built and getting it built well. For instance,
a simple 10-line function
lines of code may be completely innocuous and can simply be

and which other 10 lines can melt the internet. 

one will readily invest in learning
and teaching formal methods with gusto. That will offer a natural
placement for formal methods in advanced systems classes.

How can formal methods win placement in beginner classes? For that, it
must give users something on day-1 that they can apply to their lives.
This is what ML does (in a day, one can understand how auto-completion
works). The very first successful formal methods -- model checkers
and model finders -- are still the first tools of choice for today's
advanced OS and library designers. It is also entirely fortunate that
the same tools also can excite someone in a day ("Sudoku by SAT in a day")
and find meaningful roles in rejuvenating existing discrete math and automata
classes.

---

V5

By many measures, Formal Methods have succeeded. How else would one explain
many of its stunning achievements including its ubiquitous use in the hardware
industry, in the design of critical embedded software, and even in mechanically
deriving compilers? And yet, Formal Methods do not generate the same level of
excitement among students as many other topics do. How can we turn things around?

Mindful of these discussions and proposed solutions going back at least three
decades, what I hope to contribute are two types of classes. 

While these topics have been discussed over decades by experts with 

I believe that one 

I bev







applied for things such as device drivers? or that C compilers
can now be mechanically derived?  Yet, formal methods cannot survive
and remain relevant in curricula solely by the power of their inner beauty.
We must aggressively engage now to keep FM relevant in classes we teach.
Here are two suggestions, one addressing systems classes and the other
addressing foundational beginner classes.


First, today's systems classes often do not differentiate between
getting a system built and getting it built well. For instance,
a simple 10-line function
lines of code may be completely innocuous and can simply be

and which other 10 lines can melt the internet. 

one will readily invest in learning
and teaching formal methods with gusto. That will offer a natural
placement for formal methods in advanced systems classes.

How can formal methods win placement in beginner classes? For that, it
must give users something on day-1 that they can apply to their lives.
This is what ML does (in a day, one can understand how auto-completion
works). The very first successful formal methods -- model checkers
and model finders -- are still the first tools of choice for today's
advanced OS and library designers. It is also entirely fortunate that
the same tools also can excite someone in a day ("Sudoku by SAT in a day")
and find meaningful roles in rejuvenating existing discrete math and automata
classes.

---

To keep an area moving briskly, it is important to steadily make news,
stay relevant, and recruit.
magic, 
Magic,
Relevance,
Recruitment


----
V6

By many measures, Formal Methods have succeeded. How else could one
explain its central role in designing high-end hardware, in floating-point
verification flows, and synthesized artifacts? Yet, FM cannot stay relevant
based purely on its inner beauty.

With the End of Moore's law combined with insatiable compute needs, we face
not only the prospects of deep-seated bugs but also extreme productivity loss.
Formal methods will become even more critical at this cutting edge: for example,
race checkers handling irregular computations, and parallelizing compilers
producing correctness certificates. Today, advanced system design is taught
detached from promising formal methods that might apply. Cooperation at this
level is essential to train students, while also keeping them highly motivated.
Student recruitment efforts must also be launched within entry-level CS classes
through the judicious insertion of basic Formal Methods (e.g., BDD/SAT and
model checking/finding) within existing classes that are often outmoded.
 
---
